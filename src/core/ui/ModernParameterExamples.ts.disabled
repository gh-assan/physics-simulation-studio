/**
 * Modern examples showing how to use the simplified parameter system
 * with plugin visibility controls
 */

import { Parameter, ParameterSchemaRegistry } from './ParameterSchema';
import { ParameterManager, TweakpaneAdapter } from './ParameterManager';

// Example 1: Modern Flag Component with decorators
export class ModernFlagComponent {
  static readonly type = "FlagComponent";
  static readonly pluginId = "flag-simulation"; // Plugin ownership

  @Parameter({ 
    label: "Width", 
    min: 0.1, 
    max: 10, 
    step: 0.1, 
    group: "Dimensions",
    pluginId: "flag-simulation"
  })
  width = 2.0;

  @Parameter({ 
    label: "Height", 
    min: 0.1, 
    max: 10, 
    step: 0.1, 
    group: "Dimensions",
    pluginId: "flag-simulation"
  })
  height = 3.0;

  @Parameter({ 
    label: "Stiffness", 
    min: 0.1, 
    max: 1.0, 
    step: 0.01, 
    group: "Physics",
    order: 10,
    pluginId: "flag-simulation"
  })
  stiffness = 0.8;

  @Parameter({ 
    label: "Damping", 
    min: 0.01, 
    max: 1.0, 
    step: 0.01, 
    group: "Physics",
    order: 11,
    pluginId: "flag-simulation"
  })
  damping = 0.1;

  @Parameter({ 
    label: "Wind Strength", 
    min: 0, 
    max: 10, 
    step: 0.1, 
    group: "Environment",
    pluginId: "flag-simulation"
  })
  windStrength = 2.0;

  @Parameter({ 
    label: "Wind Direction", 
    type: 'vector3',
    group: "Environment",
    pluginId: "flag-simulation"
  })
  windDirection = { x: 1, y: 0, z: 0 };

  @Parameter({ 
    label: "Texture", 
    type: 'text',
    group: "Appearance",
    pluginId: "flag-simulation"
  })
  textureUrl = "flag.png";

  @Parameter({ 
    label: "Attach to Pole",
    type: 'select',
    options: [
      { label: "None", value: null },
      { label: "Pole 1", value: 1 },
      { label: "Pole 2", value: 2 }
    ],
    group: "Attachment",
    pluginId: "flag-simulation"
  })
  poleEntityId: number | null = null;
}

// Example 2: Water Droplet with conditional visibility
export class ModernWaterDropletComponent {
  static readonly type = "WaterDropletComponent";
  static readonly pluginId = "water-simulation";

  @Parameter({ 
    label: "Radius", 
    min: 0.01, 
    max: 1, 
    step: 0.01, 
    group: "Size",
    pluginId: "water-simulation"
  })
  radius = 0.1;

  @Parameter({ 
    label: "Mass", 
    min: 0.1, 
    max: 10, 
    step: 0.1, 
    group: "Physics",
    pluginId: "water-simulation"
  })
  mass = 1.0;

  @Parameter({ 
    label: "Enable SPH",
    type: 'boolean',
    group: "Advanced Physics",
    pluginId: "water-simulation"
  })
  enableSPH = false;

  @Parameter({ 
    label: "Smoothing Length", 
    min: 0.01, 
    max: 1, 
    step: 0.01, 
    group: "Advanced Physics",
    pluginId: "water-simulation",
    condition: (component: any) => component.enableSPH === true // Conditional visibility
  })
  smoothingLength = 0.1;

  @Parameter({ 
    label: "Gas Constant", 
    min: 1, 
    max: 100, 
    step: 1, 
    group: "Advanced Physics",
    pluginId: "water-simulation",
    condition: (component: any) => component.enableSPH === true
  })
  gasConstant = 20;

  @Parameter({ 
    label: "Color", 
    type: 'color',
    group: "Appearance",
    pluginId: "water-simulation"
  })
  color = "#4A90E2";
}

// Example 3: Manual schema registration for complex cases
ParameterSchemaRegistry.register('SolarSystemComponent', [
  { 
    key: 'timeScale', 
    label: 'Time Scale', 
    type: 'number', 
    min: 0.1, 
    max: 10, 
    step: 0.1,
    group: 'Simulation',
    pluginId: 'solar-system',
    order: 1
  },
  { 
    key: 'showOrbits', 
    label: 'Show Orbits', 
    type: 'boolean',
    group: 'Visualization',
    pluginId: 'solar-system',
    order: 2
  },
  { 
    key: 'orbitColor', 
    label: 'Orbit Color', 
    type: 'color',
    group: 'Visualization',
    pluginId: 'solar-system',
    order: 3,
    condition: (component: any) => component.showOrbits === true
  }
], 'solar-system');

// Example 4: Plugin management
export class ParameterSystemUsage {
  private parameterManager: ParameterManager;

  constructor(tweakpane: any) {
    const adapter = new TweakpaneAdapter(tweakpane);
    this.parameterManager = new ParameterManager(adapter);
  }

  // Show only flag simulation parameters
  showFlagSimulation() {
    this.parameterManager.showOnlyPlugin('flag-simulation');
    
    // Demo with component instance
    const flagComponent = new ModernFlagComponent();
    this.parameterManager.registerComponent('FlagComponent', flagComponent);
  }

  // Show only water simulation parameters  
  showWaterSimulation() {
    this.parameterManager.showOnlyPlugin('water-simulation');
    
    const waterComponent = new ModernWaterDropletComponent();
    this.parameterManager.registerComponent('WaterDropletComponent', waterComponent);
  }

  // Show both flag and water simultaneously
  showMultiplePlugins() {
    this.parameterManager.showMultiplePlugins(['flag-simulation', 'water-simulation']);
    
    const flagComponent = new ModernFlagComponent();
    const waterComponent = new ModernWaterDropletComponent();
    
    this.parameterManager.registerComponent('FlagComponent', flagComponent);
    this.parameterManager.registerComponent('WaterDropletComponent', waterComponent);
  }

  // Dynamic plugin switching
  switchToPlugin(pluginId: string) {
    console.log(`Switching to plugin: ${pluginId}`);
    this.parameterManager.showOnlyPlugin(pluginId);
    
    // Clear old parameters and show relevant ones
    this.parameterManager.clearAll();
    this.loadParametersForPlugin(pluginId);
  }

  private loadParametersForPlugin(pluginId: string) {
    switch (pluginId) {
      case 'flag-simulation':
        this.parameterManager.registerComponent('FlagComponent', new ModernFlagComponent());
        break;
      case 'water-simulation':
        this.parameterManager.registerComponent('WaterDropletComponent', new ModernWaterDropletComponent());
        break;
      case 'solar-system':
        // Use manually registered schema
        const solarComponent = { 
          timeScale: 1.0, 
          showOrbits: true, 
          orbitColor: "#FFD700" 
        };
        this.parameterManager.registerComponent('SolarSystemComponent', solarComponent);
        break;
    }
  }

  // Get statistics
  getSystemStats() {
    return {
      visiblePlugins: this.parameterManager.getVisiblePlugins(),
      availablePlugins: this.parameterManager.getAvailablePlugins(),
      totalSchemas: ParameterSchemaRegistry.getActivePlugins().length
    };
  }
}

// Example 5: Integration with existing PropertyInspectorSystem
export class ModernPropertyInspectorIntegration {
  
  // Drop-in replacement for existing PropertyInspectorUIManager.registerComponentControls
  static registerComponentControls(
    parameterManager: ParameterManager,
    componentTypeKey: string,
    componentInstance: any,
    pluginId?: string
  ) {
    // Check if component has modern schema
    const schema = ParameterSchemaRegistry.getVisible(componentTypeKey);
    
    if (schema.length > 0) {
      // Use new system
      parameterManager.registerComponent(componentTypeKey, componentInstance);
      console.log(`✅ Using modern parameter system for ${componentTypeKey}`);
    } else {
      // Auto-infer and register schema
      const inferredSchema = this.createSchemaFromComponent(componentInstance, pluginId);
      ParameterSchemaRegistry.register(componentTypeKey, inferredSchema, pluginId);
      parameterManager.registerComponent(componentTypeKey, componentInstance);
      console.log(`📝 Auto-generated schema for ${componentTypeKey}`);
    }
  }

  private static createSchemaFromComponent(component: any, pluginId?: string): any[] {
    const schema = [];
    
    for (const [key, value] of Object.entries(component)) {
      if (this.isParameterizable(value)) {
        schema.push({
          key,
          label: this.generateLabel(key),
          type: this.inferType(value),
          pluginId,
          ...this.inferConstraints(value)
        });
      }
    }
    
    return schema;
  }

  private static isParameterizable(value: any): boolean {
    return typeof value === 'number' || 
           typeof value === 'string' || 
           typeof value === 'boolean' ||
           (typeof value === 'object' && value?.value !== undefined);
  }

  private static generateLabel(key: string): string {
    return key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();
  }

  private static inferType(value: any): string {
    if (typeof value === 'number') return 'number';
    if (typeof value === 'boolean') return 'boolean';
    return 'text';
  }

  private static inferConstraints(value: any): any {
    if (typeof value === 'object' && value) {
      return {
        min: value.min,
        max: value.max,
        step: value.step
      };
    }
    return {};
  }
}

// Example usage in main application
export function createModernParameterSystem(tweakpane: any) {
  return new ParameterSystemUsage(tweakpane);
}

/*
COMPARISON: Lines of Code Reduction
==================================

OLD SYSTEM:
- FlagParameterPanel.ts: 280 lines
- WaterDropletParameterPanel.ts: 234 lines  
- WaterBodyParameterPanel.ts: 89 lines
- ComponentPropertyDefinitions.ts: 263 lines
- ComponentPropertyRegistry.ts: 40 lines
- PropertyInspectorUIManager.ts: 164 lines
- Various property files: ~200 lines
TOTAL: ~1270 lines

NEW SYSTEM:
- ParameterSchema.ts: 144 lines
- ParameterManager.ts: 225 lines
- PluginParameterIntegration.ts: 264 lines
- This examples file: 340 lines
TOTAL: ~973 lines

REDUCTION: 297 lines (23% less code)
PLUS: Much cleaner, type-safe, maintainable, and feature-rich!
*/
