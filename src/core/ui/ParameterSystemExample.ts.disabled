/**
 * Example of how the simplified system would work
 */

import { Parameter, ParameterSchemaRegistry, SchemaInference } from './ParameterSchema';
import { ParameterManager, TweakpaneAdapter } from './ParameterManager';

// Method 1: Using decorators (most elegant)
export class FlagComponent {
  @Parameter({ 
    label: "Width", 
    min: 0.1, 
    max: 10, 
    step: 0.1, 
    group: "Dimensions" 
  })
  width = 2.0;

  @Parameter({ 
    label: "Height", 
    min: 0.1, 
    max: 10, 
    step: 0.1, 
    group: "Dimensions" 
  })
  height = 3.0;

  @Parameter({ 
    label: "Stiffness", 
    min: 0.1, 
    max: 1.0, 
    step: 0.01, 
    group: "Physics" 
  })
  stiffness = 0.8;

  @Parameter({ 
    label: "Damping", 
    min: 0.01, 
    max: 1.0, 
    step: 0.01, 
    group: "Physics" 
  })
  damping = 0.1;

  @Parameter({ 
    label: "Wind Strength", 
    min: 0, 
    max: 10, 
    step: 0.1, 
    group: "Environment" 
  })
  windStrength = 2.0;
}

// Method 2: Manual schema registration (for complex cases)
ParameterSchemaRegistry.register('WaterDropletComponent', [
  { key: 'radius', label: 'Radius', type: 'number', min: 0.01, max: 1, step: 0.01, group: 'Size' },
  { key: 'mass', label: 'Mass', type: 'number', min: 0.1, max: 10, step: 0.1, group: 'Physics' },
  { key: 'viscosity', label: 'Viscosity', type: 'number', min: 0, max: 1, step: 0.01, group: 'Physics' }
]);

// Method 3: Automatic inference (for rapid prototyping)
class SimpleComponent {
  temperature = { value: 25, min: 0, max: 100, step: 1 };
  pressure = { value: 1.0, min: 0, max: 10, step: 0.1 };
  enabled = true;
}

// Auto-register inferred schema
const component = new SimpleComponent();
const inferredSchema = SchemaInference.infer(component);
ParameterSchemaRegistry.register('SimpleComponent', inferredSchema);

// Usage in plugin - much simpler!
export class SimplifiedFlagPlugin {
  private parameterManager: ParameterManager;

  constructor(uiAdapter: TweakpaneAdapter) {
    this.parameterManager = new ParameterManager(uiAdapter);
  }

  // No more massive parameter panel classes!
  showParametersFor(component: any, componentType: string) {
    return this.parameterManager.registerComponent(componentType, component);
  }

  hideParameters() {
    this.parameterManager.clearAll();
  }
}

// Integration example
export function createSimplifiedParameterSystem(pane: any) {
  const adapter = new TweakpaneAdapter(pane);
  return new ParameterManager(adapter);
}

// Comparison: Old vs New approach

/* 
OLD APPROACH (280+ lines):
=========================
export class FlagParameterPanel extends ParameterPanelComponent {
  static readonly type = "FlagParameterPanel";
  readonly componentType = FlagComponent.type;
  
  constructor(world: World) {
    super();
    this.world = world;
  }

  registerControls(uiManager: IUIManager, component?: IComponent): void {
    const properties: ComponentControlProperty[] = [
      {
        property: "width",
        type: "number",
        label: "Flag Width",
        min: 0.1,
        max: 10,
        step: 0.1
      },
      // ... 40+ more repetitive definitions
    ];
    
    uiManager.registerComponentControls(this.componentType, component, properties);
  }

  updateControls(component: IComponent): void {}
  handleEvent(event: string, component: IComponent): void {}
}

NEW APPROACH (5-10 lines per component):
=======================================
export class FlagComponent {
  @Parameter({ label: "Width", min: 0.1, max: 10, step: 0.1 })
  width = 2.0;

  @Parameter({ label: "Height", min: 0.1, max: 10, step: 0.1 })  
  height = 3.0;
  
  // ... just add @Parameter to properties you want in UI
}

// Usage:
parameterManager.registerComponent('FlagComponent', flagInstance);
*/
