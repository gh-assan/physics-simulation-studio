#!/usr/bin/env node

/**
 * Plugin Discovery Generator
 * 
 * This script scans the src/plugins directory and automatically generates
 * the plugin discovery map for the AutoPluginRegistry.
 * 
 * Usage: node scripts/generate-plugin-discovery.js
 */

const fs = require('fs');
const path = require('path');

function generatePluginDiscoveryCode() {
  const pluginsDir = path.join(__dirname, '../src/plugins');

  // Check if plugins directory exists
  if (!fs.existsSync(pluginsDir)) {
    console.error('Plugins directory not found:', pluginsDir);
    process.exit(1);
  }

  // Scan for plugin folders
  const pluginFolders = fs.readdirSync(pluginsDir, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name)
    .filter(folderName => {
      // Check if the folder has an index.ts file
      const indexPath = path.join(pluginsDir, folderName, 'index.ts');
      return fs.existsSync(indexPath);
    });

  console.log(`Found ${pluginFolders.length} plugin folders:`, pluginFolders);

  // Generate the plugin discovery map code
  const mapEntries = pluginFolders.map(folderName => `    '${folderName}',`).join('\n');

  const switchCases = pluginFolders.map(folderName =>
    `      case '${folderName}':\n        return () => import('../../plugins/${folderName}');`
  ).join('\n');

  const generatedCode = `
  /**
   * Create a map of available plugins for discovery
   * This method uses static imports for Vite compatibility while being dynamic about which plugins exist
   * 
   * AUTO-GENERATED CODE - DO NOT EDIT MANUALLY
   * Generated by scripts/generate-plugin-discovery.js
   * Last generated: ${new Date().toISOString()}
   */
  private createPluginDiscoveryMap() {
    // Static import map for Vite compatibility
    // Each entry represents a plugin folder that should have an index.ts file
    const pluginFolders = [
${mapEntries}
    ];

    return pluginFolders.map(folderName => ({
      folderName,
      importFunction: this.createImportFunction(folderName),
    }));
  }

  /**
   * Create an import function for a specific plugin folder
   * This abstracts the static import creation for each plugin
   * 
   * AUTO-GENERATED CODE - DO NOT EDIT MANUALLY
   */
  private createImportFunction(folderName: string) {
    switch (folderName) {
${switchCases}
      default:
        throw new Error(\`Unknown plugin folder: \${folderName}\`);
    }
  }`;

  return generatedCode;
}

// Generate and display the code
const generatedCode = generatePluginDiscoveryCode();
console.log('\n=== GENERATED PLUGIN DISCOVERY CODE ===');
console.log(generatedCode);
console.log('\n=== END GENERATED CODE ===');

// Optionally, you could write this to a file or update the AutoPluginRegistry.ts file
// For now, just display it so it can be manually copied
console.log('\nCopy the above code and replace the createPluginDiscoveryMap and createImportFunction methods in AutoPluginRegistry.ts');
